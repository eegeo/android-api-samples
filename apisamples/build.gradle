apply plugin: 'com.android.application'

def keystoreProperties = new Properties()
if (project.hasProperty('keyStorePropertiesFile')) {
    def keystorePropertiesFile = project.getProperty('keyStorePropertiesFile')
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    keystoreProperties['storeFile'] = project.getProperty('keyStoreFile')
}

def buildNumber = project.hasProperty('buildNumber') ? project.getProperty('buildNumber') : 'dev'
android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.wrld.apisamples"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "0.0." + buildNumber

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    if (project.hasProperty('keyStorePropertiesFile')) {
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty('keyStorePropertiesFile')) {
                signingConfig signingConfigs.release
            }
        }
    }

}

// latest release can be found at https://search.maven.org/artifact/com.wrld3d/wrld-android-sdk
def sdkArtifactName = 'com.wrld3d:wrld-android-sdk:' + sdkVersion + '@aar'

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    if (rootProject.getProperty('useLocalSdkBuild').toBoolean()) {
        println("useLocalSdkBuild is true - using locally built Wrld Android Java SDK")
        api project(':sdk')
    } else {
        println("useLocalSdkBuild is false - obtaining Wrld Android Java SDK from: " + sdkArtifactName)
        api(sdkArtifactName) {
            transitive = true
        }
    }
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
}

// Set the API key from the WRLD_API_KEY environment variable, as an alternative to modifying strings.xml
android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast{
        def apiKey = System.getenv("WRLD_API_KEY")
        print "Reading API key from env, WRLD_API_KEY="
        println apiKey

        if (apiKey != null) {
            File valuesFile = file("${buildDir}/intermediates/res/merged/${variant.dirName}/values/values.xml")
            println("Replacing WRLD API key in: " + valuesFile)
            String content = valuesFile.getText('UTF-8')
            content = content.replaceAll(/obtain an api key by signing up at wrld3d.com and insert here/, apiKey)
            valuesFile.write(content, 'UTF-8')
        }
    }
}
